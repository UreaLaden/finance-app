// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: finance.proto

package proto

import (
	context "context"
	budget "github.com/urealaden/cova-cents/server/proto/budget"
	pots "github.com/urealaden/cova-cents/server/proto/pots"
	transactions "github.com/urealaden/cova-cents/server/proto/transactions"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BudgetService_AddBudget_FullMethodName            = "/finance.BudgetService/AddBudget"
	BudgetService_GetBudgets_FullMethodName           = "/finance.BudgetService/GetBudgets"
	BudgetService_UpdateBudget_FullMethodName         = "/finance.BudgetService/UpdateBudget"
	BudgetService_DeleteBudget_FullMethodName         = "/finance.BudgetService/DeleteBudget"
	BudgetService_AddTransaction_FullMethodName       = "/finance.BudgetService/AddTransaction"
	BudgetService_RetrieveTransactions_FullMethodName = "/finance.BudgetService/RetrieveTransactions"
	BudgetService_AddPot_FullMethodName               = "/finance.BudgetService/AddPot"
	BudgetService_RetrievePots_FullMethodName         = "/finance.BudgetService/RetrievePots"
	BudgetService_UpdatePot_FullMethodName            = "/finance.BudgetService/UpdatePot"
	BudgetService_DeletePot_FullMethodName            = "/finance.BudgetService/DeletePot"
)

// BudgetServiceClient is the client API for BudgetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BudgetServiceClient interface {
	AddBudget(ctx context.Context, in *budget.AddBudgetRequest, opts ...grpc.CallOption) (*budget.AddBudgetResponse, error)
	GetBudgets(ctx context.Context, in *budget.GetBudgetsRequest, opts ...grpc.CallOption) (*budget.GetBudgetsResponse, error)
	UpdateBudget(ctx context.Context, in *budget.UpdateBudgetRequest, opts ...grpc.CallOption) (*budget.UpdateBudgetResponse, error)
	DeleteBudget(ctx context.Context, in *budget.DeleteBudgetRequest, opts ...grpc.CallOption) (*budget.DeleteBudgetResponse, error)
	AddTransaction(ctx context.Context, in *transactions.AddTransactionRequest, opts ...grpc.CallOption) (*transactions.AddTransactionResponse, error)
	RetrieveTransactions(ctx context.Context, in *transactions.RetrieveTransactionsRequest, opts ...grpc.CallOption) (*transactions.RetrieveTransactionsResponse, error)
	AddPot(ctx context.Context, in *pots.AddPotRequest, opts ...grpc.CallOption) (*pots.AddPotResponse, error)
	RetrievePots(ctx context.Context, in *pots.RetrievePotsRequest, opts ...grpc.CallOption) (*pots.RetrievePotsResponse, error)
	UpdatePot(ctx context.Context, in *pots.UpdatePotRequest, opts ...grpc.CallOption) (*pots.UpdatePotResponse, error)
	DeletePot(ctx context.Context, in *pots.DeletePotRequest, opts ...grpc.CallOption) (*pots.DeletePotResponse, error)
}

type budgetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBudgetServiceClient(cc grpc.ClientConnInterface) BudgetServiceClient {
	return &budgetServiceClient{cc}
}

func (c *budgetServiceClient) AddBudget(ctx context.Context, in *budget.AddBudgetRequest, opts ...grpc.CallOption) (*budget.AddBudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(budget.AddBudgetResponse)
	err := c.cc.Invoke(ctx, BudgetService_AddBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) GetBudgets(ctx context.Context, in *budget.GetBudgetsRequest, opts ...grpc.CallOption) (*budget.GetBudgetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(budget.GetBudgetsResponse)
	err := c.cc.Invoke(ctx, BudgetService_GetBudgets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) UpdateBudget(ctx context.Context, in *budget.UpdateBudgetRequest, opts ...grpc.CallOption) (*budget.UpdateBudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(budget.UpdateBudgetResponse)
	err := c.cc.Invoke(ctx, BudgetService_UpdateBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) DeleteBudget(ctx context.Context, in *budget.DeleteBudgetRequest, opts ...grpc.CallOption) (*budget.DeleteBudgetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(budget.DeleteBudgetResponse)
	err := c.cc.Invoke(ctx, BudgetService_DeleteBudget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) AddTransaction(ctx context.Context, in *transactions.AddTransactionRequest, opts ...grpc.CallOption) (*transactions.AddTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(transactions.AddTransactionResponse)
	err := c.cc.Invoke(ctx, BudgetService_AddTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) RetrieveTransactions(ctx context.Context, in *transactions.RetrieveTransactionsRequest, opts ...grpc.CallOption) (*transactions.RetrieveTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(transactions.RetrieveTransactionsResponse)
	err := c.cc.Invoke(ctx, BudgetService_RetrieveTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) AddPot(ctx context.Context, in *pots.AddPotRequest, opts ...grpc.CallOption) (*pots.AddPotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pots.AddPotResponse)
	err := c.cc.Invoke(ctx, BudgetService_AddPot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) RetrievePots(ctx context.Context, in *pots.RetrievePotsRequest, opts ...grpc.CallOption) (*pots.RetrievePotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pots.RetrievePotsResponse)
	err := c.cc.Invoke(ctx, BudgetService_RetrievePots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) UpdatePot(ctx context.Context, in *pots.UpdatePotRequest, opts ...grpc.CallOption) (*pots.UpdatePotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pots.UpdatePotResponse)
	err := c.cc.Invoke(ctx, BudgetService_UpdatePot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) DeletePot(ctx context.Context, in *pots.DeletePotRequest, opts ...grpc.CallOption) (*pots.DeletePotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pots.DeletePotResponse)
	err := c.cc.Invoke(ctx, BudgetService_DeletePot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BudgetServiceServer is the server API for BudgetService service.
// All implementations must embed UnimplementedBudgetServiceServer
// for forward compatibility.
type BudgetServiceServer interface {
	AddBudget(context.Context, *budget.AddBudgetRequest) (*budget.AddBudgetResponse, error)
	GetBudgets(context.Context, *budget.GetBudgetsRequest) (*budget.GetBudgetsResponse, error)
	UpdateBudget(context.Context, *budget.UpdateBudgetRequest) (*budget.UpdateBudgetResponse, error)
	DeleteBudget(context.Context, *budget.DeleteBudgetRequest) (*budget.DeleteBudgetResponse, error)
	AddTransaction(context.Context, *transactions.AddTransactionRequest) (*transactions.AddTransactionResponse, error)
	RetrieveTransactions(context.Context, *transactions.RetrieveTransactionsRequest) (*transactions.RetrieveTransactionsResponse, error)
	AddPot(context.Context, *pots.AddPotRequest) (*pots.AddPotResponse, error)
	RetrievePots(context.Context, *pots.RetrievePotsRequest) (*pots.RetrievePotsResponse, error)
	UpdatePot(context.Context, *pots.UpdatePotRequest) (*pots.UpdatePotResponse, error)
	DeletePot(context.Context, *pots.DeletePotRequest) (*pots.DeletePotResponse, error)
	mustEmbedUnimplementedBudgetServiceServer()
}

// UnimplementedBudgetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBudgetServiceServer struct{}

func (UnimplementedBudgetServiceServer) AddBudget(context.Context, *budget.AddBudgetRequest) (*budget.AddBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBudget not implemented")
}
func (UnimplementedBudgetServiceServer) GetBudgets(context.Context, *budget.GetBudgetsRequest) (*budget.GetBudgetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudgets not implemented")
}
func (UnimplementedBudgetServiceServer) UpdateBudget(context.Context, *budget.UpdateBudgetRequest) (*budget.UpdateBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBudget not implemented")
}
func (UnimplementedBudgetServiceServer) DeleteBudget(context.Context, *budget.DeleteBudgetRequest) (*budget.DeleteBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBudget not implemented")
}
func (UnimplementedBudgetServiceServer) AddTransaction(context.Context, *transactions.AddTransactionRequest) (*transactions.AddTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransaction not implemented")
}
func (UnimplementedBudgetServiceServer) RetrieveTransactions(context.Context, *transactions.RetrieveTransactionsRequest) (*transactions.RetrieveTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTransactions not implemented")
}
func (UnimplementedBudgetServiceServer) AddPot(context.Context, *pots.AddPotRequest) (*pots.AddPotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPot not implemented")
}
func (UnimplementedBudgetServiceServer) RetrievePots(context.Context, *pots.RetrievePotsRequest) (*pots.RetrievePotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePots not implemented")
}
func (UnimplementedBudgetServiceServer) UpdatePot(context.Context, *pots.UpdatePotRequest) (*pots.UpdatePotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePot not implemented")
}
func (UnimplementedBudgetServiceServer) DeletePot(context.Context, *pots.DeletePotRequest) (*pots.DeletePotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePot not implemented")
}
func (UnimplementedBudgetServiceServer) mustEmbedUnimplementedBudgetServiceServer() {}
func (UnimplementedBudgetServiceServer) testEmbeddedByValue()                       {}

// UnsafeBudgetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BudgetServiceServer will
// result in compilation errors.
type UnsafeBudgetServiceServer interface {
	mustEmbedUnimplementedBudgetServiceServer()
}

func RegisterBudgetServiceServer(s grpc.ServiceRegistrar, srv BudgetServiceServer) {
	// If the following call pancis, it indicates UnimplementedBudgetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BudgetService_ServiceDesc, srv)
}

func _BudgetService_AddBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(budget.AddBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).AddBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_AddBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).AddBudget(ctx, req.(*budget.AddBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_GetBudgets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(budget.GetBudgetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).GetBudgets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_GetBudgets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).GetBudgets(ctx, req.(*budget.GetBudgetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_UpdateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(budget.UpdateBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).UpdateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_UpdateBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).UpdateBudget(ctx, req.(*budget.UpdateBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_DeleteBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(budget.DeleteBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).DeleteBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_DeleteBudget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).DeleteBudget(ctx, req.(*budget.DeleteBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transactions.AddTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_AddTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).AddTransaction(ctx, req.(*transactions.AddTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_RetrieveTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transactions.RetrieveTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).RetrieveTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_RetrieveTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).RetrieveTransactions(ctx, req.(*transactions.RetrieveTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_AddPot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pots.AddPotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).AddPot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_AddPot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).AddPot(ctx, req.(*pots.AddPotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_RetrievePots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pots.RetrievePotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).RetrievePots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_RetrievePots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).RetrievePots(ctx, req.(*pots.RetrievePotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_UpdatePot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pots.UpdatePotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).UpdatePot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_UpdatePot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).UpdatePot(ctx, req.(*pots.UpdatePotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_DeletePot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pots.DeletePotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).DeletePot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BudgetService_DeletePot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).DeletePot(ctx, req.(*pots.DeletePotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BudgetService_ServiceDesc is the grpc.ServiceDesc for BudgetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BudgetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.BudgetService",
	HandlerType: (*BudgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBudget",
			Handler:    _BudgetService_AddBudget_Handler,
		},
		{
			MethodName: "GetBudgets",
			Handler:    _BudgetService_GetBudgets_Handler,
		},
		{
			MethodName: "UpdateBudget",
			Handler:    _BudgetService_UpdateBudget_Handler,
		},
		{
			MethodName: "DeleteBudget",
			Handler:    _BudgetService_DeleteBudget_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _BudgetService_AddTransaction_Handler,
		},
		{
			MethodName: "RetrieveTransactions",
			Handler:    _BudgetService_RetrieveTransactions_Handler,
		},
		{
			MethodName: "AddPot",
			Handler:    _BudgetService_AddPot_Handler,
		},
		{
			MethodName: "RetrievePots",
			Handler:    _BudgetService_RetrievePots_Handler,
		},
		{
			MethodName: "UpdatePot",
			Handler:    _BudgetService_UpdatePot_Handler,
		},
		{
			MethodName: "DeletePot",
			Handler:    _BudgetService_DeletePot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}
